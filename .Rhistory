#library(speedyseq)
#packs <- c("cowplot", "patchwork", "forcats", "ggpubr", "lubridate", "ggvenn",
#           "rlist", "ggsankey", "santaR", "pls", "ropls", "conflicted", "broom")
#install.packages(packs)
library(rstatix)
library(cowplot)
library(patchwork)
library(forcats)
library(dplyr)
library(ggpubr)
library(lubridate)
library(ggvenn)
library(rlist)
library(ggsankey)
library(santaR)
library(pls)
library(ropls)
#devtools::install_github("arleyc/PCAtest")
library(PCAtest)
library(conflicted)
library(broom)
conflict_prefer("select", winner = "dplyr", quiet = FALSE)
conflict_prefer("filter", winner = "dplyr", quiet = FALSE)
set.seed(20150615) ## if you know why i set the seed to this date, you get a special prize
pubmed <- read.csv("../lit review/pub_med_citations.csv", skip = 1)
## Title,  PMID
dat_secondary1 <- read.csv("../lit review/completed_screening_cleaned.csv")
colnames(dat_secondary1) <- c("timestamp", "reviewer","citation", "PMID", "heart_failure_yn",
"human_yn", "HF_definition", "country", "metabolomics_yn",
"metabolomics_type", "sample_type",
"microbiome_yn", "microbiome_info",
"data_availability", "data_avail_statement", "bias_rep",
"bias_controlgrp", "bias_exposure", "bias_timing", "bias_confounding",
"bias_outcome", "reviewer_comments", "PT_n")
#colnames(dat_secondary)
### check if my label and second label match
dat_secondary <- dat_secondary1 %>%
mutate(heart_failure_yn = case_when(grepl("(?i)yes", heart_failure_yn) ~ "HF",
grepl("(?i)no", heart_failure_yn) ~ "not HF"),
human_yn = case_when(grepl("(?i)yes", human_yn) ~ "Human Adults",
grepl("(?i)no", human_yn) ~"not human adults"),
metabolomics_yn = case_when(grepl("(?i)yes|unsure", metabolomics_yn) ~ "Metabolomics",
grepl("(?i)no| targeted|isotope", metabolomics_yn) ~"No Metabolomics"),
data_availability = ifelse(data_availability=="", NA, data_availability) ) %>%
## clean up for sankey
mutate(human_yn = ifelse(heart_failure_yn=="HF", human_yn, NA),
metabolomics_yn = ifelse(heart_failure_yn == "HF" & human_yn == "Human Adults",
metabolomics_yn, NA),
data_availability = ifelse(metabolomics_yn == "Metabolomics", data_availability, NA)) %>%
mutate(qualify = ifelse( heart_failure_yn== "HF" &
human_yn == "Human Adults" &
metabolomics_yn == "Metabolomics", "qualifies", "disqualified")
)
## now check my pmid if qual = qual
dat_secondary %>%
group_by(PMID) %>%
select(reviewer, PMID, qualify) %>%
mutate(same = +(n_distinct(qualify) == 1)) %>%
ungroup() %>%
filter(same==0&reviewer != "EW")
# great! will need someone to manually check these ones~~
## get preliminary look at those that do match w available data
inspect_list <- dat_secondary %>%
group_by(PMID) %>%
select(reviewer, PMID, qualify) %>%
mutate(same = +(n_distinct(qualify) == 1)) %>%
ungroup() %>%
filter(same==0&reviewer != "EW"&qualify=="qualifies")
dat_secondary$check <- dat_secondary$PMID %in% inspect_list$PMID
#dat_secondary %>% filter(check == "TRUE" &  data_availability=="Yes")
## check if citation and PMID match up with the ref list
#pubmed #PMID, Citation
#
## ok so it looks like 25 pApers have the wrong pmid ID
## qc check
#dat_secondary %>%
#  inner_join(pubmed, by = join_by("citation" == "Citation")) %>%
#  select(citation, timestamp, PMID.y, PMID.x) %>%
#  filter_("PMID.x != PMID.y")
#mutate(PMID_match = ifelse(PMID.x==PMID.y, "match", "PMID does not match citation"))
## ok upon closer inspection theres only two places where this is actually an issue@ that's good news
dat_secondary  <- data.frame(dat_secondary)
dat2_secondary <- dat_secondary %>% filter(grepl("HF", heart_failure_yn))
dat3_secondary <- dat2_secondary %>% filter(grepl("Human Adults", human_yn))
dat4_secondary <- dat3_secondary %>% filter(!grepl("No Metabolomics", metabolomics_yn))
mini <-dat_secondary %>%
filter(metabolomics_yn == "Metabolomics")
intermid <- dat_secondary %>% filter(reviewer != "EW" & reviewer_comments != "")
#table(intermid$reviewer_comments)
#dat4_secondary %>% filter(reviewer != "EW" & data_availability == "Yes")
## write in a check to see if same reviewer did the same PMID more than once
# %>% select(reviewer, PMID) %>%
#  add_count(reviewer, PMID) %>%
#  filter(n>1) %>%
#  distinct()
## many instances, places[duplicated] command in next chunk to take only the first instance
places1 <- dat_secondary %>%
filter(reviewer != "EW" & reviewer != "Ew" & reviewer != "ew" & reviewer != "EW " & reviewer != " EW" & reviewer != "English") %>%
## fix the name inputs
mutate(reviewer = fct_collapse(reviewer, Jack = "Jack",
Leise = "Leise",
YiChan = c("YiChan","YiChan Lee","YIChan Lee", "Yi-Chan Lee"),
Kiramat = c("Kiramat Ullah", "Kiramat Ullah ")))
places1 <- places1[!duplicated(places1$PMID), ]
#dat_secondary$reviewer
table(places1$reviewer)
places1 <- places1 %>%
separate(timestamp, sep = " ", into = c("date", "time") ) %>%
group_by(reviewer, date) %>% add_count
## format date
places1$date <- as.Date(mdy(places1$date))
## cumulative counts per person
places <-
places1%>%
select(reviewer, date, n) %>%
arrange(date) %>%
filter(reviewer != "English") %>%
distinct() %>%
ungroup() %>%
group_by(reviewer) %>%
mutate(cumulative_count = cumsum(n))
#all_plot <-
places %>%
ggplot(aes(x = date, y = cumulative_count, color = reviewer )) +
geom_point(size = 4) +
geom_line() +
labs(title = "Papers screened by date by reviewer") +
theme_minimal_grid() +
scale_color_manual(values = cbbPalette) #+  ylim(0,720)
#places1 <- places1
## format date
#places1$date <- as.Date(mdy(places1$date))
em_plot <- dat_secondary %>%
filter(grepl("EW|ew|Ew|EW |English", reviewer)) %>%
mutate(reviewer = "EW") %>%
separate(timestamp, sep = " ", into = c("date", "time") ) %>%
mutate(date = as.Date(mdy(date))) %>%
group_by(reviewer, date) %>%
add_count %>%
select(reviewer, date, n) %>%
arrange(date) %>%
#filter(reviewer != "English") %>%
distinct() %>%
ungroup() %>%
group_by(reviewer) %>%
mutate(cumulative_count = cumsum(n)) %>%
ggplot(aes(x = date, y = cumulative_count, color = reviewer )) +
geom_point(size = 4) +
geom_line() +
labs(title = "Papers screened by date by reviewer") +
theme_minimal_grid() +
scale_color_manual(values = cbbPalette) +
ylim(0,720)
ggsave("reviewers_progress.png")
#table(dat_secondary$reviewer)
#plot_grid(em_plot, all_plot)
dat_plot <- places1 %>% ungroup() %>% select(heart_failure_yn, human_yn,metabolomics_yn, data_availability )
## plot
mydat <- dat_plot %>%
make_long(heart_failure_yn, human_yn,metabolomics_yn, data_availability )
reagg <- mydat %>%
dplyr::group_by(node)%>%  # Here we are grouping the data by node and then we are taking the frequency of it
tally()
mydat2 <- merge(mydat,
reagg,
by.x = 'node',
by.y = 'node',
all.x = TRUE)
mydat2 %>%
ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node),
label = paste0(node, " = ", n))) +           # This Creates a label for each node) +
geom_sankey(flow.alpha = 0.5,          #This Creates the transparency of your node
node.color = "black",     # This is your node color
show.legend = FALSE) +
geom_sankey_label(size = 4, fill = "white") + # specifies the Label node
theme_bw() +
theme(axis.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank() ) +
theme(legend.position = 'none') +
scale_fill_viridis_d(option = "inferno")+
labs(title = "Systematic Review: Screening Results")
print("Not shown are the articles not in English.")
lilb <- dat_secondary1 %>%
filter(reviewer != "EW" & reviewer != "Ew" & reviewer != "ew" & reviewer != "EW " & reviewer != " EW" & reviewer != "English")
table(lilb$heart_failure_yn)
lilb2 <- lilb %>% filter(heart_failure_yn == "Yes, study of heart failure.")
table(lilb2$human_yn)
lilb3 <- lilb2 %>% filter(human_yn== "yes, human adult study (or combination human + animal)")
table(lilb3$metabolomics_yn)
lilb4 <- lilb3 %>% filter(metabolomics_yn != "No, does not measure metabolomics or does not apply")
table(lilb4$data_availability)
#table(lilb4$data_avail_statement)
d1 <- read.csv("MTBLS8183_GC-MS_positive__metabolite_profiling_v2_maf.tsv", sep = "\t") ## GCMS positive
## title: Landscape of gut microbiota and metabolites and their interaction in comorbid heart failure and depressive symptoms: a random forest analysis study 2023
#d2 <- read.csv("MTBLS8802_LC-MS_positive_hilic_metabolite_profiling_v2_maf.tsv", sep = "\t") ## LCMS positive
# our stemi paper...
#d2.5 <- read.csv("MTBLS8802_Targeted_PeakTable_all_for public upload.txt", sep = "\t")
## confirm that this is the same as d2
d3_neg <- read.csv("compiled_stdy_metabolomics_dat - ST_001364_AN002270_neg_ion_metabolites.tsv", sep = "\t")
d3_pos <- read.csv("compiled_stdy_metabolomics_dat - ST_001364_AN002270_pos_ion_metabolites.tsv", sep = "\t")
d2 <- read.csv("compiled_stdy_metabolomics_dat - ST000587_AN000902_metabolites.tsv", sep = "\t")
d2_2 <- read.csv("ST000588_1_datmat.txt", sep = "\t")
## now read in the metadata files
d1_meta <- read.csv("MTBLS8183_sample_info.txt", sep = "\t") # feces, human
#d2_meta <- read.csv("MTBLS8802_sample_info.txt", sep = "\t")
d23_meta <- read.csv("compiled_stdy_metabolomics_dat - metadata_st.tsv", sep = "\t")
#colnames(d2_2) %in% d23_meta$sample
#"HF08" %in% d23_meta$sample#
#length(unique(minimeta$sample))
#table(minimeta$heart_cond)
metab_desc <- read.csv("metabolites-verlap-desc.csv")
# (!require(devtools)) install.packages("devtools")
#devtools::install_github("yanlinlin82/ggvenn")
# batch ?? transformation?
d1_metabo <- d1$metabolite_identification
d2_breath_metabo <- d2$Samples
d3n_metabo <- d3_neg$Samples ## two overlapped with d4
d3p_metabo <- d3_pos$Samples
d3_metabo <- append(d3n_metabo, d3p_metabo)
d2_2 <- d2_2 %>% filter(Metabolite_name != "Factors")
d2_2_metabo <- d2_2$Metabolite_name
#append(d2_metabo, d2_2_metabo)
## plot in a venn diagram to see the overlap simply
## reference for plotting: https://www.datanovia.com/en/blog/venn-diagram-with-r-or-rstudio-a-million-ways/
x <- list(
D1_STOOL = d1_metabo,
D2_EBC = d2_breath_metabo,
D2_SALIVA = d2_2_metabo,
D3_LV = d3_metabo)
#  D3_pos = d3p_metabo)
ggvenn(
x,
fill_color = c("#0073C2FF", "lightgoldenrod2", "lightgoldenrod3", "hotpink2"),
stroke_size = 0.5, set_name_size = 4
) +
labs(title = "Overlap of Detected Metabolites Across Studies")
ggsave("venn_d123_overlap.png")
#str(d2_metabo)
#d23_overlap <- unlist(unique(d2_metabo[d2_metabo %in% d3_metabo]))
d13_overlap <- unlist(unique(d1_metabo[d1_metabo %in% d3_metabo]))
d13_overlap <- unlist(unique(d1_metabo[d1_metabo %in% d3_metabo]))
print("The following metabolites were detected in both left ventricle hearts and stool of HF.")
d13_overlap
#print("The following metabolites were detected in left ventricle hearts and stool of HF PTs, negative ion")
#d13n_overlap
print("The following metabolites were detected in breath and stool of HF PTs. ")
d12_breath_overlap <- unlist(unique(d1_metabo[d1_metabo %in% d2_breath_metabo]))
d12_breath_overlap
print("The following metabolites were detected in saliva and stool oh HF patients. ")
d12_sal_overlap <- unlist(unique(d1_metabo[d1_metabo %in% d2_2_metabo]))
d12_sal_overlap
print("The following metabolites were detected in saliva and LV. ")
d23_sal_overlap <- unlist(unique(d3_metabo[d3_metabo %in% d2_2_metabo]))
d23_sal_overlap
#d13n_overlap
print("The following metabolites were detected in breath and LV of HF PTs. ")
d23_breath_overlap <- unlist(unique(d3_metabo[d3_metabo %in% d2_breath_metabo]))
#d12_sal_overlap
d23_breath_overlap
#interested_metabolites1 <- append(d23n_overlap, d13p_overlap)
interested_metabolites <- d13_overlap
d23_meta <- d23_meta %>%
mutate(heart_cond = ifelse(grepl("ICM|DCM", studyID),"HF",
ifelse(grepl("heart_failure", condition), "HF",
"CTRL"))) %>%
mutate(analysisID = ifelse(grepl("heart_failure|control", condition), "D2", "D3" ))
d1_meta <- d1_meta %>%
filter(Characteristics.Sample.type. != "pooled quality control sample") %>%
mutate(heart_cond = ifelse(grepl("HF", Factor.Value.Cohort.), "HF", "CTRL"),
sample = Source.Name)
d1_meta$studyID = "D1"
## did the above to unify HF / control labels
d1minimeta <- d1_meta %>%
select(sample, heart_cond, studyID)
d23_minimeta <- d23_meta %>% select(sample, heart_cond, studyID) %>%
mutate(studyID = ifelse(grepl("Condition", studyID), "D3",
ifelse(grepl("ST000", studyID), "D2",
"idk")))
minimeta <- base::rbind(d1minimeta, d23_minimeta)
## now combine metabilite data
d1mini  <- d1 %>% pivot_longer(cols = QC.1:last_col(),
names_to = "sample", values_to = "abun") %>%
select(sample, metabolite_identification, abun) %>%
mutate(studyID = "D1", Samples = metabolite_identification) %>%
select(-metabolite_identification) %>%
filter(!grepl("QC", sample))
d1mini$sample <- gsub('\\.', '-', d1mini$sample)
d2mini <- d2 %>%
pivot_longer(cols = HF01:last_col(),
names_to = "sample", values_to = "abun") %>%
mutate(studyID = "D2_EBC")
d2_2_mini <- d2_2 %>% pivot_longer(cols = C10:last_col(),
names_to = "sample", values_to = "abun") %>%
mutate(studyID = "D2_SALIVA") %>%
select(-RefMet_name)
d2_2_mini <- d2_2_mini %>%
mutate(Samples = Metabolite_name, abun = as.numeric(abun)) %>%
select(-Metabolite_name) %>%
filter(abun > 0)
d3p_mini <- d3_pos %>% pivot_longer(cols = X78_15:last_col(),
names_to = "sample", values_to = "abun") %>%
mutate(studyID = "D3")
d3n_mini <- d3_neg %>% pivot_longer(cols = X78_15:last_col(),
names_to = "sample", values_to = "abun") %>%
mutate(studyID = "D3" )
#d3_mini <- rbind(d3n_mini, d3p_mini)
d3metamin <- d23_meta %>%
filter(analysisID=="D3") %>%
select(sample,condition)
d3min <- merge(d3p_mini, d3n_mini, all = TRUE)
d3min$sample <- str_replace(d3min$sample, "X", "")
d3min <-left_join(d3min, d3metamin, join_by("sample"== "condition")) %>%
select(Samples, sample.y, studyID, abun) %>%
mutate(sample = sample.y) %>%
select(-sample.y)
#unique(d3min$studyID)
d23min <- merge(d2mini, d3min, all = TRUE)
metab1 <- merge(d1mini, d23min, all = TRUE)
metab2 <- merge(metab1, d2_2_mini, all = T) %>% filter(abun > 0)
#metab
metab <-
metab2 %>%
merge(minimeta, all = TRUE, by = "sample")%>%
mutate(studyID = paste0(studyID.x)) %>%
#filter(studyID == "D2_SALIVA") %>% ##QC check
select(-studyID.x, -studyID.y) %>%
group_by(studyID, heart_cond) %>%
mutate(tot = length(unique(sample))) %>% ## number of samples in studyID group
group_by(studyID, Samples, heart_cond) %>%
mutate(abun = as.numeric(abun))  %>% ## Samples is metabolites
mutate(grp_median = median(abun)) %>%
#dplyr::select(-studyID.x) %>%
mutate(filt_threshold = ceiling( (20*tot)/100) )  %>% ## 20 percent of samples, celing rounds up to nearest whole number
mutate(obs_count = n()) %>% ## number of obs of metabolite in samples
filter(obs_count > filt_threshold) %>% ## yay now we are filtering to remove metabolites less than 20% of sample
distinct() %>%## just a check %>%    filter(studyID == "D3")
select(-obs_count, - tot, -grp_median, -filt_threshold) #%>%
#  pivot_wider(names_from = Samples, values_from = abun)
#filter(Samples == "Galactose")
# add log transformation and median normalization
### no longer used as log transformations and median norms appear to be inappropriate for this data
## keeping this code here as a reference, also bc trans_metab df is referenced below so easier to keep this
trans_metab <-metab %>%
ungroup()
trans_metab %>%
merge(metab_desc, by.x = "Samples", by.y = "Metabolite") %>%
filter(abun > 0) %>%
mutate(study_group = paste0(studyID, "_", heart_cond)) %>%
ggplot(aes(x = log10(abun), y = Samples, fill = study_group, shape = heart_cond)) +
geom_boxplot(outlier.shape = NA ) +
geom_point(position = position_jitterdodge(jitter.width = 0.15,
dodge.width = 1), alpha = 0.6, size = 1) +
theme_bw() +
scale_shape_manual( values=c("HF"=15, "CTRL" = 17, "NA" = 10) ) +
scale_fill_manual(values = r_pal) +
facet_wrap(.~fxnl_category, scales = "free")
#trans_metab %>% filter(studyID == "D3")#
#metab2 %>% filter(studyID == "D3")
#metab_desc
#metab
trans_metab %>%
ungroup() %>%
mutate(study_group = paste0(studyID, "_",heart_cond))%>%
#  filter(Samples %in% interested_metabolites) %>%
merge(metab_desc, by.x = "Samples", by.y = "Metabolite") %>%
ggplot(aes(x = abun, y = Samples, fill = study_group, shape = heart_cond)) +
geom_boxplot(outlier.shape = NA ) +
geom_point(position = position_jitterdodge(jitter.width = 0.15,
dodge.width = 1), alpha = 0.6, size = 1) +
theme_bw() +
scale_shape_manual( values=c("HF"=15, "CTRL" = 17, "NA" = 10) ) +
scale_fill_manual(values = r_pal) +
facet_wrap(.~fxnl_category, scales = "free")
## lets add a heatmap here instead
#ggheatmap(metab)
#heatmapdat <- trans_metab %>% select(sample, Samples, heart_cond, studyID, abun) %>%
#  pivot_wider(names_from = sample, values_from = norm_abun_log10, values_fill = 0)
trans_metab %>% arrange(heart_cond) %>%
ggplot(aes(x = Samples, y = sample, fill = log10(abun))) +
geom_tile() +#  coord_fixed() +
scale_fill_gradient2(low = "#075AFF",
mid = "#FFFFCC",
high = "#FF0000") +
facet_wrap(studyID~heart_cond, scales = "free") +
theme_bw()
conduct_pca_raw_abun <- function(studyID_filt, main_dat){
d1wide <- main_dat %>%
ungroup() %>%
select(Samples, abun, sample, studyID)%>%
filter(studyID == studyID_filt)%>%
#    mutate(norm_abun_log10 = as.numeric(.data$norm_abun_log10)) %>%
pivot_wider(names_from = "Samples", values_from = abun, values_fill = 0 )
# return(d1wide)
d1_pca <- main_dat %>%
ungroup() %>%
select(Samples, abun, sample, studyID)%>%
filter(studyID == studyID_filt)%>%
pivot_wider(names_from = "Samples", values_from = abun, values_fill = 0 ) %>%
select(where(is.numeric)) %>% # retain only numeric columns
prcomp(scale = TRUE) # do PCA on scaled data
d1wide <- merge(d1wide, minimeta, by = "sample", all.x = T) %>% distinct()
d1wide <- d1wide %>% mutate(study_group = paste0(studyID.x, "_",heart_cond))
plot_name <- paste0(studyID_filt, " PCA Plot")
pca_plot <- d1_pca %>%
augment(d1wide) %>% # add original dataset back in
ggplot(aes(.fittedPC1, .fittedPC2, color = heart_cond)) +
geom_point(size = 3) +
scale_color_manual(values = c(HF = "#D55E00", CTRL = "#0072B2")  ) +
theme_half_open(12) + background_grid() +
labs(title = plot_name) +
stat_ellipse()
arrow_style <- arrow(
angle = 20, ends = "first", type = "closed", length = grid::unit(8, "pt")
)
# plot rotation matrix
arrow_plot <- d1_pca %>%
tidy(matrix = "rotation") %>%
pivot_wider(names_from = "PC", names_prefix = "PC", values_from = "value") %>%
ggplot(aes(PC1, PC2)) +
geom_segment(xend = 0, yend = 0, arrow = arrow_style) +
geom_text(
aes(label = column),
hjust = 1, nudge_x = -0.02,
color = "#904C2F"
) +
#xlim(-1.25, .5) + ylim(-.5, 1) +
coord_fixed() + # fix aspect ratio to 1:1
theme_minimal_grid(12) + labs(title = plot_name)
percent_plot <- d1_pca %>%
tidy(matrix = "eigenvalues") %>%
ggplot(aes(PC, percent)) +
geom_col(fill = "#56B4E9", alpha = 0.8) +
scale_x_continuous(breaks = 1:9) +
scale_y_continuous(
labels = scales::percent_format(),
expand = expansion(mult = c(0, 0.01))
) +
theme_minimal_hgrid(12) +
labs(title = plot_name) +
xlim(0,10)#+  ylim(0,10)
combo_plot <- plot_grid(pca_plot, percent_plot)
#return(pca_plot)
#return(arrow_plot)
#return(percent_plot)
return(combo_plot)
}
conduct_pca_raw_abun("D3", main_dat=trans_metab)
ggsave("pca_w_pv_d3.png")
conduct_pca_raw_abun("D1", main_dat=trans_metab)
ggsave("pca_w_pv_d1.png")
#ggsave("d1_raw_abun.png")
conduct_pca_raw_abun("D2_EBC", main_dat=trans_metab)
ggsave("pca_w_pv_d2_ebc.png")
conduct_pca_raw_abun("D2_SALIVA", main_dat=trans_metab)
ggsave("pca_w_pv_d2_saliva.png")
#conduct_pca_raw_abun("[D2_EBC|D2_SALIVA]", main_dat=trans_metab)
#conduct_pca_norm_log("D3", main_dat=trans_metab)
#conduct_pca_norm_log("D1", main_dat=trans_metab)
#ggsave("d1_normalized_pca.png")
#conduct_pca_norm_log("D2_EBC", main_dat=trans_metab)
#conduct_pca_norm_log("D2_SALIVA", main_dat=trans_metab)
#conduct_pca_norm_log("[D2_EBC|D2_SALIVA]", main_dat=trans_metab)
#norm_abun_log10" %in% colnames(trans_metab)
## assumes columns are variables/features and rows are sampleIDs / obs
pca_sig_test <- function(studyID_filt, main_dat){
d1_pca_cat <- main_dat %>%
ungroup() %>%
dplyr::select(Samples, abun, sample, studyID, heart_cond)%>%
filter(studyID == studyID_filt & abun > 0) %>%
select(-studyID) %>%
pivot_wider(names_from = "Samples", values_from = abun , values_fill = 0) %>%
select(-Isopropanol)
d1_pca <- d1_pca_cat %>% dplyr::select(where(is.numeric))
## our data is already scales, so not using the below scaling functgion
#d1_pca_scaled <- scale(d1_pca)
results <- PCAtest(d1_pca, nboot = 100, nperm = 100, plot = FALSE, counter = FALSE, varcorr = TRUE)
# adonis/adonis2 not appropriate because it assumed we are working with distance matrices, which we are not?? unless we input the pca itself?
# <- adonis2(d1_pcaa ~ heart_cond, data = d1_pca_cat, method='eu')
## pairwi9se.adonis2() inappropriate here bc assumes working with bray-curtis/microbe data, which we are not.
## test pca in UV scaling, produces same results so hashing out (no point of doing it). leaving for future reviewers.
return(results)
# inData <- main_dat %>%
#   ungroup() %>%
#   filter(studyID == studyID_filt) %>%
#  dplyr::select(Samples, abun, sample, studyID) %>%
#uv_mat <- santaR:::scaling_UV(inData)
#result2 <- PCAtest(uv_mat, nboot=100, nperm=100, plot = TRUE)
## produces identical results, leaving here only if a reviewer wants to test or see with a scaling method
}
#pca_sig_test("D2_SALIVA", trans_metab)
#pca_sig_test("D3", trans_metab)
#pca_sig_test("D1", trans_metab)
#pca_sig_test("D2_EBC", trans_metab)#
metab_list <- as.list(unique(trans_metab$Samples))
wilx_results <- tibble()
colnames(wilx_results) <- c(".y.", "group1", "group2", "n1", "n2", "statistic", "p")
for (i in metab_list) {
metabi = paste0(i)
intermediary <- trans_metab %>%
filter(studyID == "D2_SALIVA") %>%
distinct() %>%
filter(Samples == metabi) %>%
summarize(across(where(is.numeric), ~wilcox_test(formula = abun ~ heart_cond, alternative = "two.sided", data = trans_metab)))
wilx_results <- merge(wilx_results,  intermediary)
}
